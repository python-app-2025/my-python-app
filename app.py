import streamlit as st
import sqlite3
import pandas as pd
from datetime import datetime, time
from docx import Document
import io
import os
import uuid
import matplotlib.pyplot as plt
from openpyxl import Workbook
from openpyxl.drawing.image import Image as OpenpyxlImage



# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ü—Ä–æ–≤–µ—Ä–∫–∏ –û–¢–∏–ü–ë",
    page_icon="‚úÖ",
    layout="wide"
)


# –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
DATABASE_NAME = "inspections.db"
COMMON_DB = "common.db"
SOFTWARE_DB = "software_checks.db"
UPLOAD_FOLDER = "uploads"
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

# --------------------------
# –û–±—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º–∏
# --------------------------

def init_common_db():
    conn = sqlite3.connect(COMMON_DB)
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS organizations
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  name TEXT UNIQUE)''')
    conn.commit()
    conn.close()

def add_organization(name):
    conn = sqlite3.connect(COMMON_DB)
    try:
        c = conn.cursor()
        c.execute("INSERT INTO organizations (name) VALUES (?)", (name,))
        conn.commit()
    except sqlite3.IntegrityError:
        raise ValueError("–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    finally:
        conn.close()

def get_organizations():
    conn = sqlite3.connect(COMMON_DB)
    c = conn.cursor()
    c.execute("SELECT name FROM organizations ORDER BY name")
    organizations = [row[0] for row in c.fetchall()]
    conn.close()
    return organizations

def delete_organization(name):
    conn = sqlite3.connect(COMMON_DB)
    c = conn.cursor()
    c.execute("DELETE FROM organizations WHERE name=?", (name,))
    conn.commit()
    conn.close()

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
def update_organization(old_name, new_name):
    if not old_name or not new_name:
        raise ValueError("–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
    
    if old_name == new_name:
        raise ValueError("–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç —Å—Ç–∞—Ä–æ–≥–æ.")
    
    conn = sqlite3.connect(COMMON_DB)
    c = conn.cursor()
    try:
        c.execute("SELECT name FROM organizations WHERE name = ?", (new_name,))
        if c.fetchone():
            raise ValueError(f"–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{new_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        
        c.execute("UPDATE organizations SET name = ? WHERE name = ?", (new_name, old_name))
        conn.commit()
    except sqlite3.Error as e:
        raise ValueError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: {e}")
    finally:
        conn.close()

        
def get_record_by_id(record_id):
    conn = sqlite3.connect(SOFTWARE_DB)
    c = conn.cursor()
    c.execute("SELECT * FROM checks WHERE id=?", (record_id,))
    record = c.fetchone()
    conn.close()
    return record
        
# --------------------------
# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
# --------------------------

def main_menu():
    st.sidebar.title("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    if "module" not in st.session_state:
        st.session_state.module = None

    if st.sidebar.button("üìã –ü—Ä–æ–≤–µ—Ä–∫–∏ –û–¢–∏–ü–ë"):
        st.session_state.module = "module1"
    
    if st.sidebar.button("üèóÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∏ –≤ –°–ü"):
        st.session_state.module = "module2"
    
    if st.sidebar.button("üè¢ –°–ø–∏—Å–æ–∫ –ü–û"):
        st.session_state.module = "module3"
    
    if st.sidebar.button("üö™ –í—ã—Ö–æ–¥"):
        st.session_state.module = None
        st.rerun()

# --------------------------
# –ú–æ–¥—É–ª—å 1: –ü—Ä–æ–≤–µ—Ä–∫–∏ –û–¢–∏–ü–ë
# --------------------------

def module1():
    st.title("üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –û–¢–∏–ü–ë")

    # –§—É–Ω–∫—Ü–∏–∏ –ë–î
    def create_db():
        conn = sqlite3.connect(DATABASE_NAME)
        c = conn.cursor()
        c.execute('''CREATE TABLE IF NOT EXISTS inspections
                     (id INTEGER PRIMARY KEY AUTOINCREMENT,
                      inspection_date TEXT,
                      object TEXT,
                      section TEXT,
                      organization TEXT,
                      violator_name TEXT,
                      violation_description TEXT,
                      violation_type TEXT,
                      violation_category TEXT,
                      risk_level TEXT,
                      inspector_name TEXT,
                      elimination_date TEXT,
                      elimination_status TEXT,
                      photo_path TEXT)''')
        conn.commit()
        conn.close()

    def add_to_db(data):
        conn = sqlite3.connect(DATABASE_NAME)
        c = conn.cursor()
        c.execute('''INSERT INTO inspections VALUES 
                  (NULL,?,?,?,?,?,?,?,?,?,?,?,?,?)''', data)
        conn.commit()
        conn.close()

    def get_all_data():
        conn = sqlite3.connect(DATABASE_NAME)
        df = pd.read_sql('SELECT * FROM inspections', conn)
        conn.close()
        return df

    def update_db(data):
        conn = sqlite3.connect(DATABASE_NAME)
        c = conn.cursor()
        c.execute('''UPDATE inspections SET
                  inspection_date=?,
                  object=?,
                  section=?,
                  organization=?,
                  violator_name=?,
                  violation_description=?,
                  violation_type=?,
                  violation_category=?,
                  risk_level=?,
                  inspector_name=?,
                  elimination_date=?,
                  elimination_status=?,
                  photo_path=?
                  WHERE id=?''', data)
        conn.commit()
        conn.close()

    def delete_from_db(record_id):
        conn = sqlite3.connect(DATABASE_NAME)
        c = conn.cursor()
        c.execute('SELECT photo_path FROM inspections WHERE id=?', (record_id,))
        result = c.fetchone()
        if result and result[0] and os.path.exists(result[0]):
            os.remove(result[0])
        c.execute('DELETE FROM inspections WHERE id=?', (record_id,))
        conn.commit()
        conn.close()

    # –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
    create_db()
    with st.expander("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å", expanded=True):
        with st.form("add_form", clear_on_submit=True):
            cols = st.columns(2)
            inspection_date = cols[0].date_input("–î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏*", datetime.today())
            object_val = cols[1].selectbox(
                "–û–±—ä–µ–∫—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏*",
                ["–£–¢–≠–¶-2", "–ê–ù–ì–¶-5", "–°—Ç–∞–Ω 2000", "–ö–¶-1", "–ö–¶-2", "–ê–¢–£", "–î–¶-1", "–î–¶-2","–¶–•–ü–ü","–¶–ì–ü","–£–ñ–î–¢"]
            )
            
            section = cols[0].selectbox("–£—á–∞—Å—Ç–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏*", ["–£—á–∞—Å—Ç–æ–∫ –º–æ–Ω—Ç–∞–∂–∞ –º\–∫","–°–≤–∞—Ä–æ—á–Ω—ã–π —É—á–∞—Å—Ç–æ–∫","–£—á–∞—Å—Ç–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è","–û—Å—å 11-3","–û—Ç–º–µ—Ç–∫–∞ +45.100","–ú–∞—Å–ª–æ–ø–æ–¥–≤–∞–ª"])
            organization = cols[1].selectbox(
                "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏*", 
                get_organizations(),
                index=0
            )
            
            cols_v = st.columns(2)
            violator_name = cols_v[0].text_input("–§–ò–û –ù–∞—Ä—É—à–∏—Ç–µ–ª—è*")
            violation_description = cols_v[1].text_area("–û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è*")

            
            cols2 = st.columns(2)
            violation_type = cols2[0].selectbox(
                "–¢–∏–ø –Ω–∞—Ä—É—à–µ–Ω–∏—è*", [
                "–†–∞–±–æ—Ç—ã –Ω–∞ –≤—ã—Å–æ—Ç–µ", "–û–≥–Ω–µ–≤—ã–µ —Ä–∞–±–æ—Ç—ã/–ü–æ–∂–∞—Ä–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", 
                "–ì—Ä—É–∑–æ–ø–æ–¥—ä—ë–º–Ω—ã–µ —Ä–∞–±–æ—Ç—ã/–†–∞–±–æ—Ç–∞ —Å –ü–°", "–≠–ª–µ–∫—Ç—Ä–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", 
                "–†–∞–±–æ—Ç—ã –≤ –≥–∞–∑–æ–æ–ø–∞—Å–Ω. –º–µ—Å—Ç–∞—Ö/–∑–∞–º–∫–Ω—É—Ç–æ–º –ø—Ä–æ—Å—Ç—Ä-–≤–µ", 
                "–ó–µ–º–ª—è–Ω—ã–µ —Ä–∞–±–æ—Ç—ã", "–î–æ–∫—É–º–µ–Ω—Ç—ã/–î–æ–ø—É—Å–∫–∏ –∏ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è", 
                "–ò—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏ –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–∏–π", 
                "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ/–ò—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å –°–ò–ó", 
                "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏/—Ä–∞–±–æ—á–∏—Ö –º–µ—Å—Ç", 
                "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–æ—Ä–æ–∂–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è"])
            
            
            # –í—Ç–æ—Ä–æ–π –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫
            violation_category = cols2[1].selectbox("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏—è*", ["–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –°–ò–ó", "–û–±—É—á–µ–Ω–∏–µ –∏ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏", "–ü–ü–†", "–õ–µ—Å–∞", "–ê–Ω–∫–µ—Ä–Ω—ã–µ –ª–∏–Ω–∏–∏", "–î—Ä—É–≥–æ–µ"])
            

            cols3 = st.columns(3)
            risk_level = cols3[1].selectbox(
                "–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞*", 
                ["–≤—ã—Å–æ–∫–∏–π", "—Å—Ä–µ–¥–Ω–∏–π", "–Ω–∏–∑–∫–∏–π"]
            )
            
            inspector_name = cols_v[0].selectbox(
                "–ü—Ä–æ–≤–µ—Ä—è—é—â–∏–π*", 
                ["–°—É–ø–µ—Ä–≤–∞–π–∑–µ—Ä –ò–¢–ö –ò–≤–∞–Ω–æ–≤ –ò.–ò.", "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –û–¢–∏–ü–ë –ü–µ—Ç—Ä–æ–≤ –ü.–ü.", "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –û–¢ –ü–û –°–∏–¥–æ—Ä–æ–≤ –°.–°."]
            )
            elimination_date = cols3[2].date_input(
                "–î–∞—Ç–∞ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è*", 
                datetime.today()
            )
            elimination_status = cols3[0].selectbox(
                "–°—Ç–∞—Ç—É—Å —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è*", 
                ["–Ω–µ —É—Å—Ç—Ä–∞–Ω–µ–Ω–æ", "—É—Å—Ç—Ä–∞–Ω–µ–Ω–æ"]
            )
            
            uploaded_photo = st.file_uploader(
                "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –Ω–∞—Ä—É—à–µ–Ω–∏—è",
                type=['jpg', 'jpeg', 'png'],
                accept_multiple_files=False
            )
            
            if st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å"):
                photo_path = save_uploaded_file(uploaded_photo)
                data = (
                    inspection_date.strftime("%d.%m.%Y"),
                    object_val,
                    section,
                    organization,
                    violator_name,
                    violation_description,
                    violation_type,
                    violation_category,
                    risk_level,
                    inspector_name,
                    elimination_date.strftime("%d.%m.%Y"),
                    elimination_status,
                    photo_path
                )
                add_to_db(data)
                st.success("–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
                st.rerun()

    # –¢–∞–±–ª–∏—Ü–∞ –¥–∞–Ω–Ω—ã—Ö
    st.subheader("üìä –°–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–µ—Ä–æ–∫")
    df = get_all_data()
    
    if not df.empty:
        edited_df = st.data_editor(
            df,
            column_config={
                "photo_path": st.column_config.ImageColumn(
                    "–§–æ—Ç–æ",
                    help="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
                )
            },
            hide_index=True,
            use_container_width=True,
            disabled=df.columns.tolist()
        )
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å—è–º–∏
        cols = st.columns(4)
        selected_id = cols[0].number_input(
            "–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–ø–∏—Å–∏", 
            min_value=1,
            max_value=df['id'].max()
        )
        
        if cols[1].button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å"):
            delete_from_db(selected_id)
            st.success("–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞!")
            st.rerun()
            
        if cols[2].button("üì• –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel"):
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π Excel-—Ñ–∞–π–ª
            wb = Workbook()
            ws = wb.active
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
            ws.append(df.columns.tolist())
    
            # –î–∞–Ω–Ω—ã–µ
            for row in df.itertuples(index=False):
                ws.append(row)
    
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤ –±—É—Ñ–µ—Ä
            output = io.BytesIO()
            wb.save(output)
            output.seek(0)

            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª
            st.download_button(
                label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å Excel",
                data=output,
                file_name='inspections.xlsx',
                mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
    

        
        if cols[3].button("üìÑ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∞–∫—Ç"):
            record = df[df['id'] == selected_id].iloc[0].to_dict()
            doc_buffer = generate_act(record)
            if doc_buffer:
                st.download_button(
                    label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –∞–∫—Ç",
                    data=doc_buffer,
                    file_name=f"–ê–∫—Ç_{record['id']}.docx",
                    mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                )
        
        # –ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–æ—Ç–æ
        if selected_id:
            record = df[df['id'] == selected_id]
            if not record.empty:
                photo_path = record.iloc[0]['photo_path']
                if photo_path and os.path.exists(photo_path):
                    st.image(photo_path, caption="–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ", width=300)
                else:
                    st.warning("–î–ª—è —ç—Ç–æ–π –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ")
    else:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")

# --------------------------
# –ú–æ–¥—É–ª—å 2: –ü—Ä–æ–≤–µ—Ä–∫–∏ –≤ –°–ü
# --------------------------

def module2():
    st.title("üèóÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∏ –≤ –°–ü")


    # –§—É–Ω–∫—Ü–∏–∏ –ë–î
    def init_db():
        conn = sqlite3.connect(SOFTWARE_DB)
        c = conn.cursor()
        c.execute('''CREATE TABLE IF NOT EXISTS checks
                     (id INTEGER PRIMARY KEY AUTOINCREMENT,
                      date TEXT,
                      sp_name TEXT,
                      responsible TEXT,
                      po_name TEXT,
                      object TEXT,
                      works_count INTEGER,
                      responsibility_zone TEXT,
                      start_time TEXT,
                      end_time TEXT,
                      personnel_count INTEGER,
                      checks_count INTEGER,
                      violations_count INTEGER,
                      violation_type TEXT,
                      kpb_violation TEXT,
                      kpb_detected INTEGER,
                      act_issued INTEGER)''')
        c.execute('''CREATE TABLE IF NOT EXISTS photos
                     (id INTEGER PRIMARY KEY AUTOINCREMENT,
                      record_id INTEGER,
                      file_path TEXT,
                      FOREIGN KEY(record_id) REFERENCES checks(id))''')
        conn.commit()
        conn.close()

    def add_record(data):
        conn = sqlite3.connect(SOFTWARE_DB)
        c = conn.cursor()
        c.execute('''INSERT INTO checks 
                     (date, sp_name, responsible, po_name, object, works_count, responsibility_zone, 
                      start_time, end_time, personnel_count, checks_count, violations_count, 
                      violation_type, kpb_violation, kpb_detected, act_issued) 
                     VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)''', data)
        record_id = c.lastrowid
        conn.commit()
        conn.close()
        return record_id

    def save_photos(record_id, uploaded_files):
        if not uploaded_files:
            return
        save_dir = f"uploads/{record_id}"
        os.makedirs(save_dir, exist_ok=True)
        conn = sqlite3.connect(SOFTWARE_DB)
        c = conn.cursor()
        for uploaded_file in uploaded_files:
            file_path = os.path.join(save_dir, uploaded_file.name)
            with open(file_path, 'wb') as f:
                f.write(uploaded_file.getbuffer())
            c.execute("INSERT INTO photos (record_id, file_path) VALUES (?, ?)", 
                     (record_id, file_path))
        conn.commit()
        conn.close()

    def get_photos(record_id):
        conn = sqlite3.connect(SOFTWARE_DB)
        c = conn.cursor()
        c.execute("SELECT file_path FROM photos WHERE record_id=?", (record_id,))
        photos = [row[0] for row in c.fetchall()]
        conn.close()
        return photos

    def delete_record(record_id):
        conn = sqlite3.connect(SOFTWARE_DB)
        c = conn.cursor()
        photos = get_photos(record_id)
        for photo in photos:
            if os.path.exists(photo):
                os.remove(photo)
        c.execute("DELETE FROM photos WHERE record_id=?", (record_id,))
        c.execute("DELETE FROM checks WHERE id=?", (record_id,))
        conn.commit()
        conn.close()
        dir_path = f"uploads/{record_id}"
        if os.path.exists(dir_path):
            try:
                os.rmdir(dir_path)
            except OSError:
                pass

    def get_records():
        conn = sqlite3.connect(SOFTWARE_DB)
        c = conn.cursor()
        c.execute("SELECT * FROM checks")
        records = c.fetchall()
        conn.close()
        return records

    def update_record(data):
        conn = sqlite3.connect(SOFTWARE_DB)
        c = conn.cursor()
        try:
            c.execute('''UPDATE checks SET
                 date=?,
                 sp_name=?,
                 responsible=?,
                 po_name=?,
                 object=?,
                 works_count=?,
                 responsibility_zone=?,
                 start_time=?,
                 end_time=?,
                 personnel_count=?,
                 checks_count=?,
                 violations_count=?,
                 violation_type=?,
                 kpb_violation=?,
                 kpb_detected=?,
                 act_issued=?
                 WHERE id=?''', data)
            conn.commit()
        except sqlite3.Error as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {e}")
        finally:
            conn.close()
        
    # –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –ø—É—Ç—è–º–∏ –∫ —Ñ–æ—Ç–æ
    def get_all_data():
        conn = sqlite3.connect(SOFTWARE_DB)
        df = pd.read_sql('''
            SELECT c.*, GROUP_CONCAT(p.file_path) as photo_paths 
            FROM checks c
            LEFT JOIN photos p ON c.id = p.record_id
            GROUP BY c.id
        ''', conn)
        conn.close()
        df['photo_paths'] = df['photo_paths'].apply(lambda x: x.split(',') if x else [])
        return df

    
    # –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –º–æ–¥—É–ª—è
    init_db()
    

    # –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
    with st.expander("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å", expanded=False):
        with st.form("add_record_form", clear_on_submit=True):
            cols = st.columns(2)
            date = cols[0].date_input("–î–∞—Ç–∞*", datetime.today())
            date_str = date.strftime("%d.%m.%Y")  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            sp_name = cols[1].selectbox("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –°–ü*", ["–ê–¢–£", "–î–¶-1", "–î–¶-2", "–ö–¶-1","–ö–¶-2","–¶–•–ü–ü","–¶–ì–ü","–£–ñ–î–¢"])


            cols1 = st.columns(3)
            responsible = cols1[0].selectbox("–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ç –°–ü*", ["–ú–∞—Å—Ç–µ—Ä –ò–≤–∞–Ω–æ–≤ –ò.–ò.", "–ù–∞—á–∞–ª—å–Ω–∏–∫ —É—á–∞—Å—Ç–∫–∞ –ü–µ—Ç—Ä–æ–≤ –ü.–ü.", "–ì–ª–∞–≤–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –°–∏–¥–æ—Ä–æ–≤ –°.–°."])
            object = cols1[1].selectbox("–û–±—ä–µ–∫—Ç/–£—á–∞—Å—Ç–æ–∫", ["–£—á–∞—Å—Ç–æ–∫-1", "–£—á–∞—Å—Ç–æ–∫-2", "–£—á–∞—Å—Ç–æ–∫-3", "–£—á–∞—Å—Ç–æ–∫-4"])
            responsibility_zone = cols1[2].selectbox("–ó–æ–Ω–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ (–°–ü)",["–ê–¢–£", "–î–¶-1", "–î–¶-2", "–ö–¶-1","–ö–¶-2","–¶–•–ü–ü","–¶–ì–ü","–£–ñ–î–¢"])

            cols2 = st.columns(3)
            po_name = cols2[0].selectbox("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ü–û*", get_organizations())          
            start_time = cols2[1].time_input("–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç*", time(8, 0))
            end_time = cols2[2].time_input("–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç*", time(17, 0))
            
            cols3 = st.columns(2)
            personnel_count = cols3[0].number_input("–ö–æ–ª-–≤–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –ü–û*", min_value=1)
            works_count = cols3[1].number_input("–ö–æ–ª-–≤–æ –≤—ã–ø–æ–ª–Ω—è–µ–º—ã—Ö —Ä–∞–±–æ—Ç*", min_value=1)

            cols4 = st.columns(2)
            checks_count = cols4[0].number_input("–ü—Ä–æ–≤–µ–¥–µ–Ω–æ –ø—Ä–æ–≤–µ—Ä–æ–∫*", min_value=1)
            violations_count = cols4[1].number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π*", min_value=0)
            
            violation_type = st.selectbox("–¢–∏–ø –Ω–∞—Ä—É—à–µ–Ω–∏—è*", [
                "–†–∞–±–æ—Ç—ã –Ω–∞ –≤—ã—Å–æ—Ç–µ", 
                "–û–≥–Ω–µ–≤—ã–µ —Ä–∞–±–æ—Ç—ã/–ü–æ–∂–∞—Ä–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", 
                "–ì—Ä—É–∑–æ–ø–æ–¥—ä—ë–º–Ω—ã–µ —Ä–∞–±–æ—Ç—ã/–†–∞–±–æ—Ç–∞ —Å –ü–°", 
                "–≠–ª–µ–∫—Ç—Ä–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", 
                "–†–∞–±–æ—Ç—ã –≤ –≥–∞–∑–æ–æ–ø–∞—Å–Ω. –º–µ—Å—Ç–∞—Ö/–∑–∞–º–∫–Ω—É—Ç–æ–º –ø—Ä–æ—Å—Ç—Ä-–≤–µ", 
                "–ó–µ–º–ª—è–Ω—ã–µ —Ä–∞–±–æ—Ç—ã", 
                "–î–æ–∫—É–º–µ–Ω—Ç—ã/–î–æ–ø—É—Å–∫–∏ –∏ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è", 
                "–ò—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏ –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–∏–π", 
                "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ/–ò—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å –°–ò–ó", 
                "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏/—Ä–∞–±–æ—á–∏—Ö –º–µ—Å—Ç", 
                "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–æ—Ä–æ–∂–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è", "–ù–∞—Ä—É—à–µ–Ω–∏–π –Ω–µ –≤—ã—è–≤–ª–µ–Ω–æ"
            ])


            cols5 = st.columns(2)
            kpb_violation = cols5[0].selectbox("–ù–∞—Ä—É—à–µ–Ω–∏—è –ö–ü–ë*", ["–ù–µ—Ç",
                "–ù–µ—Ç –∞–ª–∫–æ–≥–æ–ª—é –∏ –Ω–∞—Ä–∫–æ—Ç–∏–∫–∞–º", 
                "–°–æ–æ–±—â–∞–π –æ –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏—è—Ö", 
                "–ü–æ–ª—É—á–∏ –¥–æ–ø—É—Å–∫", 
                "–ó–∞—â–∏—Ç–∏ —Å–µ–±—è –æ—Ç –ø–∞–¥–µ–Ω–∏—è"
            ])
            
            act_issued = cols5[1].selectbox("–û—Ñ–æ—Ä–º–ª–µ–Ω –ê–∫—Ç*", ["–ù–µ—Ç", "–î–∞"])
            
            uploaded_files = st.file_uploader(
                "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏",
                type=["png", "jpg", "jpeg"],
                accept_multiple_files=True
            )
            
            if st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å"):
                data = (
                    date_str,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–∞—Ç—É
                    sp_name,
                    responsible,
                    po_name,
                    object,
                    works_count,
                    responsibility_zone,
                    start_time.strftime("%H:%M"),
                    end_time.strftime("%H:%M"),
                    personnel_count,
                    checks_count,
                    violations_count,
                    violation_type,
                    kpb_violation,
                    1 if kpb_violation in ("–ù–µ—Ç –∞–ª–∫–æ–≥–æ–ª—é –∏ –Ω–∞—Ä–∫–æ—Ç–∏–∫–∞–º", "–°–æ–æ–±—â–∞–π –æ –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏—è—Ö", "–ó–∞—â–∏—Ç–∏ —Å–µ–±—è –æ—Ç –ø–∞–¥–µ–Ω–∏—è", "–ü–æ–ª—É—á–∏ –¥–æ–ø—É—Å–∫") else 0,
                    1 if act_issued == "–î–∞" else 0
                )
                record_id = add_record(data)
                save_photos(record_id, uploaded_files)
                st.success("–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
                st.rerun()


    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    with st.expander("üìã –í—Å–µ –∑–∞–ø–∏—Å–∏"):
     records = get_records()
     df = pd.DataFrame(records, columns=[
        "ID", "–î–∞—Ç–∞", "–°–ü", "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π", "–ü–û", "–û–±—ä–µ–∫—Ç", 
        "–ö–æ–ª-–≤–æ —Ä–∞–±–æ—Ç", "–ó–æ–Ω–∞ –æ—Ç–≤–µ—Ç.", "–ù–∞—á–∞–ª–æ", "–û–∫–æ–Ω—á–∞–Ω–∏–µ", 
        "–ü–µ—Ä—Å–æ–Ω–∞–ª", "–ü—Ä–æ–≤–µ—Ä–∫–∏", "–ù–∞—Ä—É—à–µ–Ω–∏—è", "–¢–∏–ø –Ω–∞—Ä—É—à–µ–Ω–∏—è", 
        "–ö–ü–ë –Ω–∞—Ä—É—à–µ–Ω–∏–µ", "–ö–ü–ë –≤—ã—è–≤–ª–µ–Ω–æ", "–ê–∫—Ç"])


# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç –¥–¥.–º–º.–≥–≥–≥–≥
     df["–î–∞—Ç–∞"] = pd.to_datetime(df["–î–∞—Ç–∞"], format="%d.%m.%Y").dt.strftime("%d.%m.%Y")

    
     st.dataframe(
        df.drop(columns=["–ö–ü–ë –≤—ã—è–≤–ª–µ–Ω–æ"]),
        use_container_width=True,
        hide_index=True)

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å—è–º–∏
     cols = st.columns(4)
     selected_id = cols[0].number_input("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–ø–∏—Å–∏", min_value=1)

     if cols[1].button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å"):
        delete_record(selected_id)
        st.success("–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞!")
        st.rerun()

        
     if selected_id:
        photos = get_photos(selected_id)
        if photos:
            cols = st.columns(3)
            for i, photo in enumerate(photos):
                with cols[i % 3]:
                    st.image(photo, use_container_width=True, width=300)
        else:
            st.warning("–ù–µ—Ç —Ñ–æ—Ç–æ –¥–ª—è —ç—Ç–æ–π –∑–∞–ø–∏—Å–∏")

          
     if st.button("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏"):
        record = get_record_by_id(selected_id)  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –ø–æ ID
        if record:
                with st.form("edit_form"):
                    st.write("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ ID:", selected_id)
                    # –ü—Ä–µ–¥–∑–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã —Ç–µ–∫—É—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                    edit_date = st.date_input("–î–∞—Ç–∞", datetime.strptime(record[1], "%d.%m.%Y"))
                    edit_sp_name = st.selectbox("–°–ü", ["–ê–¢–£", "–î–¶-1", "–î–¶-2", "–ö–¶-1", "–ö–¶-2", "–¶–•–ü–ü", "–¶–ì–ü", "–£–ñ–î–¢"], index=["–ê–¢–£", "–î–¶-1", "–î–¶-2", "–ö–¶-1", "–ö–¶-2", "–¶–•–ü–ü", "–¶–ì–ü", "–£–ñ–î–¢"].index(record[2]))
                    edit_responsible = st.text_input("–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π", value=record[3])
                    edit_po_name = st.selectbox("–ü–û", get_organizations(), index=get_organizations().index(record[4]))
                    edit_object = st.text_input("–û–±—ä–µ–∫—Ç", value=record[5])
                    edit_works_count = st.number_input("–ö–æ–ª-–≤–æ —Ä–∞–±–æ—Ç", value=record[6])
                    edit_responsibility_zone = st.text_input("–ó–æ–Ω–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏", value=record[7])
                    edit_start_time = st.time_input("–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç", value=datetime.strptime(record[8], "%H:%M").time())
                    edit_end_time = st.time_input("–û–∫–æ–Ω—á–∞–Ω–∏–µ —Ä–∞–±–æ—Ç", value=datetime.strptime(record[9], "%H:%M").time())
                    edit_personnel_count = st.number_input("–ö–æ–ª-–≤–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞", value=record[10])
                    edit_checks_count = st.number_input("–ü—Ä–æ–≤–µ–¥–µ–Ω–æ –ø—Ä–æ–≤–µ—Ä–æ–∫", value=record[11])
                    edit_violations_count = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π", value=record[12])
                    edit_violation_type = st.selectbox("–¢–∏–ø –Ω–∞—Ä—É—à–µ–Ω–∏—è", [
                        "–†–∞–±–æ—Ç—ã –Ω–∞ –≤—ã—Å–æ—Ç–µ", "–û–≥–Ω–µ–≤—ã–µ —Ä–∞–±–æ—Ç—ã/–ü–æ–∂–∞—Ä–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", 
                        "–ì—Ä—É–∑–æ–ø–æ–¥—ä—ë–º–Ω—ã–µ —Ä–∞–±–æ—Ç—ã/–†–∞–±–æ—Ç–∞ —Å –ü–°", "–≠–ª–µ–∫—Ç—Ä–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", 
                        "–†–∞–±–æ—Ç—ã –≤ –≥–∞–∑–æ–æ–ø–∞—Å–Ω. –º–µ—Å—Ç–∞—Ö/–∑–∞–º–∫–Ω—É—Ç–æ–º –ø—Ä–æ—Å—Ç—Ä-–≤–µ", 
                        "–ó–µ–º–ª—è–Ω—ã–µ —Ä–∞–±–æ—Ç—ã", "–î–æ–∫—É–º–µ–Ω—Ç—ã/–î–æ–ø—É—Å–∫–∏ –∏ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è", 
                        "–ò—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏ –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–∏–π", 
                        "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ/–ò—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å –°–ò–ó", 
                        "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏/—Ä–∞–±–æ—á–∏—Ö –º–µ—Å—Ç", 
                        "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–æ—Ä–æ–∂–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è", "–ù–∞—Ä—É—à–µ–Ω–∏–π –Ω–µ –≤—ã—è–≤–ª–µ–Ω–æ"
                    ], index=[
                        "–†–∞–±–æ—Ç—ã –Ω–∞ –≤—ã—Å–æ—Ç–µ", "–û–≥–Ω–µ–≤—ã–µ —Ä–∞–±–æ—Ç—ã/–ü–æ–∂–∞—Ä–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", 
                        "–ì—Ä—É–∑–æ–ø–æ–¥—ä—ë–º–Ω—ã–µ —Ä–∞–±–æ—Ç—ã/–†–∞–±–æ—Ç–∞ —Å –ü–°", "–≠–ª–µ–∫—Ç—Ä–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", 
                        "–†–∞–±–æ—Ç—ã –≤ –≥–∞–∑–æ–æ–ø–∞—Å–Ω. –º–µ—Å—Ç–∞—Ö/–∑–∞–º–∫–Ω—É—Ç–æ–º –ø—Ä–æ—Å—Ç—Ä-–≤–µ", 
                        "–ó–µ–º–ª—è–Ω—ã–µ —Ä–∞–±–æ—Ç—ã", "–î–æ–∫—É–º–µ–Ω—Ç—ã/–î–æ–ø—É—Å–∫–∏ –∏ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è", 
                        "–ò—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏ –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–∏–π", 
                        "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ/–ò—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å –°–ò–ó", 
                        "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏/—Ä–∞–±–æ—á–∏—Ö –º–µ—Å—Ç", 
                        "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–æ—Ä–æ–∂–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è", "–ù–∞—Ä—É—à–µ–Ω–∏–π –Ω–µ –≤—ã—è–≤–ª–µ–Ω–æ"
                    ].index(record[13]))
                    edit_kpb_violation = st.selectbox("–ù–∞—Ä—É—à–µ–Ω–∏—è –ö–ü–ë", ["–ù–µ—Ç", "–ù–µ—Ç –∞–ª–∫–æ–≥–æ–ª—é –∏ –Ω–∞—Ä–∫–æ—Ç–∏–∫–∞–º", "–°–æ–æ–±—â–∞–π –æ –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏—è—Ö", "–ü–æ–ª—É—á–∏ –¥–æ–ø—É—Å–∫", "–ó–∞—â–∏—Ç–∏ —Å–µ–±—è –æ—Ç –ø–∞–¥–µ–Ω–∏—è"], index=["–ù–µ—Ç", "–ù–µ—Ç –∞–ª–∫–æ–≥–æ–ª—é –∏ –Ω–∞—Ä–∫–æ—Ç–∏–∫–∞–º", "–°–æ–æ–±—â–∞–π –æ –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏—è—Ö", "–ü–æ–ª—É—á–∏ –¥–æ–ø—É—Å–∫", "–ó–∞—â–∏—Ç–∏ —Å–µ–±—è –æ—Ç –ø–∞–¥–µ–Ω–∏—è"].index(record[14]))
                    edit_act_issued = st.selectbox("–ê–∫—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω", ["–ù–µ—Ç", "–î–∞"], index=0 if record[16] == 0 else 1)

                    
                    edit_date_str = edit_date.strftime("%d.%m.%Y")  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É

                    if st.form_submit_button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"):
                        update_data = (
                            edit_date.strftime("%d.%m.%Y"),
                            edit_sp_name,
                            edit_responsible,
                            edit_po_name,
                            edit_object,
                            edit_works_count,
                            edit_responsibility_zone,
                            edit_start_time.strftime("%H:%M"),
                            edit_end_time.strftime("%H:%M"),
                            edit_personnel_count,
                            edit_checks_count,
                            edit_violations_count,
                            edit_violation_type,
                            edit_kpb_violation,
                            1 if kpb_violation in ("–ù–µ—Ç –∞–ª–∫–æ–≥–æ–ª—é –∏ –Ω–∞—Ä–∫–æ—Ç–∏–∫–∞–º", "–°–æ–æ–±—â–∞–π –æ –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏—è—Ö", "–ó–∞—â–∏—Ç–∏ —Å–µ–±—è –æ—Ç –ø–∞–¥–µ–Ω–∏—è", "–ü–æ–ª—É—á–∏ –¥–æ–ø—É—Å–∫") else 0,
                            1 if edit_act_issued =="–î–∞" else 0,
                            selected_id
                        )

                            # –í—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                        st.write("–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", update_data)
                        try:
                            update_record(update_data)
                            st.success("–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
                            st.rerun()
                        except Exception as e:
                            st.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        else:
             st.error("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                
     if st.button("üì• –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel"):

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π Excel-—Ñ–∞–π–ª
            wb = Workbook()
            ws = wb.active
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
            ws.append(df.columns.tolist())
    
            # –î–∞–Ω–Ω—ã–µ
            for row in df.itertuples(index=False):
                ws.append(row)
    
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤ –±—É—Ñ–µ—Ä
            output = io.BytesIO()
            wb.save(output)
            output.seek(0)

            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª
            st.download_button(
                label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å Excel",
                data=output,
                file_name='sp_checks.xlsx',
                mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

    # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
    with st.expander("üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã"):
        po_list = get_organizations()
        selected_po = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ü–û", po_list)
        
        cols = st.columns(2)
        start_date = cols[0].date_input("–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞", datetime.today())
        end_date = cols[1].date_input("–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞", datetime.today())

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç –¥–¥.–º–º.–≥–≥–≥–≥
        start_date_str = start_date.strftime("%d.%m.%Y")
        end_date_str = end_date.strftime("%d.%m.%Y")
        
        if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç"):
            conn = sqlite3.connect(SOFTWARE_DB)
            query = f"""
                SELECT date, violations_count 
                FROM checks 
                WHERE po_name = '{selected_po}' 
                AND date BETWEEN '{start_date_str}' 
                AND '{end_date_str}'
            """
            df = pd.read_sql(query, conn)
            conn.close()

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç –¥–¥.–º–º.–≥–≥–≥–≥
            df['date'] = pd.to_datetime(df['date'], format="%d.%m.%Y").dt.strftime("%d.%m.%Y")
            
            fig, ax = plt.subplots(figsize=(10, 6))
            ax.plot(df['date'], df['violations_count'], marker='o', linestyle='-') 
            ax.set_xlabel("–î–∞—Ç–∞")
            ax.set_ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π")
            ax.set_title(f"–î–∏–Ω–∞–º–∏–∫–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π –¥–ª—è {selected_po}")
            ax.grid(True)
            st.pyplot(fig)

            # –í—ã–≥—Ä—É–∑–∫–∞ –≤ excel
            output = io.BytesIO()
            with pd.ExcelWriter(output, engine='openpyxl') as writer:
                df.to_excel(writer, sheet_name='–î–∞–Ω–Ω—ã–µ', index=False)
                
                buf = io.BytesIO()
                fig.savefig(buf, format='png', bbox_inches='tight')
                buf.seek(0)
                
                workbook = writer.book
                worksheet = workbook.create_sheet('–ì—Ä–∞—Ñ–∏–∫')
                img = OpenpyxlImage(buf)
                worksheet.add_image(img, 'A1')
            
            output.seek(0)
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç",
                data=output,
                file_name=f"–û—Ç—á–µ—Ç_{selected_po}.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )

# --------------------------
# –ú–æ–¥—É–ª—å 3: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º–∏
# --------------------------

def module3():
    st.title("üè¢ –°–ø–∏—Å–æ–∫ –ü–û")
    init_common_db()

    with st.expander("‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é", expanded=True):
        with st.form("add_org_form", clear_on_submit=True):
            new_org = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏*")
            if st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å"):
                if new_org:
                    try:
                        add_organization(new_org)
                        st.success("–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
                        st.rerun()
                    except ValueError as e:
                        st.error(str(e))

    # –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
    with st.expander("üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π", expanded=False):
     orgs = get_organizations()
     if orgs:
        st.table(orgs)
     else:
        st.warning("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π")

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è


 # –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    with st.expander("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π", expanded=False):
     items_per_page = 10  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
     page_number = st.number_input("üìÑ –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã", min_value=1)
     start_idx = (page_number - 1) * items_per_page
     end_idx = start_idx + items_per_page
     paginated_orgs = orgs[start_idx:end_idx]
     if paginated_orgs:
        for idx, org in enumerate(paginated_orgs):
            cols = st.columns([3, 1, 1])
            cols[0].write(org)  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            edit_org = cols[1].text_input(f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å {org}", key=f"edit_{org}", value=org)
            if cols[2].button("‚úèÔ∏è –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", key=f"save_{org}"):
                try:
                    update_organization(org, edit_org)  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    st.success(f"–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è '{org}' –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ '{edit_org}'!")
                    st.rerun()
                except ValueError as e:
                    st.error(str(e))
     else:
        st.warning("–ù–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.")

 # –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
    with st.expander("‚ùå –£–¥–∞–ª–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é", expanded=False):
        orgs = get_organizations()
        if orgs:
            cols = st.columns([3, 1])
            selected_org = cols[0].selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", 
                orgs
            )
            if cols[1].button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å"):
                delete_organization(selected_org)
                st.success("–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞!")
                st.rerun()
        else:
            st.warning("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π")

# --------------------------
# –û–±—â–∏–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# --------------------------

def save_uploaded_file(uploaded_file):
    if uploaded_file is not None:
        file_ext = uploaded_file.name.split('.')[-1]
        filename = f"{uuid.uuid4()}.{file_ext}"
        file_path = os.path.join(UPLOAD_FOLDER, filename)
        with open(file_path, 'wb') as f:
            f.write(uploaded_file.getbuffer())
        return file_path
    return None

def generate_act(record):
    try:
        doc = Document("template.docx")
        replacements = {
            "{inspection_date}": record.get("inspection_date", ""),
            "{object}": record.get("object", ""),
            "{section}": record.get("section", ""),
            "{organization}": record.get("organization", ""),
            "{violator_name}": record.get("violator_name", ""),
            "{violation_description}": record.get("violation_description", ""),
            "{violation_type}": record.get("violation_type", ""),
            "{violation_category}": record.get("violation_category", ""),
            "{risk_level}": record.get("risk_level", ""),
            "{inspector_name}": record.get("inspector_name", ""),
            "{elimination_date}": record.get("elimination_date", ""),
            "{elimination_status}": record.get("elimination_status", "")
        }
        
        for para in doc.paragraphs:
            for key, value in replacements.items():
                if key in para.text:
                    para.text = para.text.replace(key, str(value))

        for table in doc.tables:
            for row in table.rows:
                for cell in row.cells:
                    for key, value in replacements.items():
                        if key in cell.text:
                            cell.text = cell.text.replace(key, str(value))

        buffer = io.BytesIO()
        doc.save(buffer)
        buffer.seek(0)
        return buffer
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–∫—Ç–∞: {str(e)}")
        return None

# --------------------------
# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# --------------------------

if __name__ == "__main__":
    main_menu()
    
    if not hasattr(st.session_state, 'module'):
        st.session_state.module = None
        
    if st.session_state.module == "module1":
        module1()
    elif st.session_state.module == "module2":
        module2()
    elif st.session_state.module == "module3":
        module3()
    else:
        st.title("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        st.write("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å –≤ –±–æ–∫–æ–≤–æ–º –º–µ–Ω—é üëà")
